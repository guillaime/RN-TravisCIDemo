# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

default_platform(:ios)

platform :ios do
  desc "This will also make sure the profile is up to date"
  lane :beta do |values|
    # Before calling match, we make sure all our devices are registered on the Apple Developer Portal
    create_keychain(
      name: ENV["MATCH_KEYCHAIN_NAME"],
      password: ENV["MATCH_KEYCHAIN_PASSWORD"],
      default_keychain: true,
      unlock: true,
      timeout: 3600,
      add_to_search_list: true
    )

    unlock_keychain(
      path: ENV["MATCH_KEYCHAIN_NAME"],
      add_to_search_list: :replace,
      password: ENV['MATCH_KEYCHAIN_PASSWORD']
    )

    register_devices(
      devices_file: "./fastlane/devices.txt",
    )

    match(
      app_identifier: "nl.guillaime.traviscidemo",
      type: "adhoc",
      force_for_new_devices: !is_ci, # update only forced on non-CI systems, and only if there is a new device
      # clone_branch_directly: true,
      readonly: true,  #readonly mode to be sure it won't create any new certificates or profiles.
      keychain_name: ENV["MATCH_KEYCHAIN_NAME"],
      keychain_password: ENV["MATCH_KEYCHAIN_PASSWORD"]
    )

    Change build number (requirement of Testflight).
    increment_build_number(
      xcodeproj: "../TravisCIDemo.xcodeproj"
    )

    # Build a release
    gym(
      scheme: "TravisCIDemo",
      clean: true,
      project: "../TravisCIDemo.xcodeproj",
      workspace: "../TravisCIDemo.xcworkspace", # since using pods
      export_method: "ad-hoc",
    )

    emails = values[:test_email] ? values[:test_email] : ['tj@abc.com'] # You can list more emails here
    groups = values[:test_email] ? nil : nil # You can define groups on the web and reference them here

    crashlytics(
      api_token: '03219a875bcdc17c29e6a850f5d6e102ec3ece50',
      build_secret: 'ead4e396916ee1c3efae37e815829fbd56b8ba4a1da3963cfa830662beeabe68',
      emails: emails,
      groups: groups,
      debug: true,
      notes: 'Distributed with fastlane', # Check out the changelog_from_git_commits action
      notifications: true  # Should this distribution notify your testers via email?
    )

    # sh "your_script.sh"
    # You can also use other beta testing services here (run `fastlane actions`)
  end
end
